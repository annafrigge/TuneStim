function msg = main( pat_path,hand,lead,lead_orientation,atlas,target_names,constraint_names,optischeme,EThreshold,relaxation,Nthreads,space,plotoption,rebuild)

% main function that finds the optimal stimulation given the pre-processed
% neuroimages in pat_path. The stimulation target and constraint are
% defined by the file names in 'targets' and 'constraints' which can be
% found in the 'atlas' lead-DBS directory.

% Input Arguments
% ---------------
% pat_path      :   (str) path to the patient directory.
%                   Required.
% hand          :   (cell) brain hemispheres of interest. {'dx'},{'sin'} or {'both'}.
%                   Required.
% lead          : (str)
% lead orientation : (cell of int)
%
% atlas         :   (str) atlas name (must be identical to leadDBS)
%                   Optional. Default = DISTAL Minimal (Ewert 2017)
% target_names       :   (cell of str) target names.
%                   Optional. Default = {STN motor}
% optischeme    :   Optimization scheme, either "Conservative" or "Minimum
%                   coverage"
% constraint_names   :   (cell of str) constraint names.
%                   Optional. Default = {STN limbic, STN associative}
% EThreshold    : (int)
%
% Relaxation    :   (int) Optimization 1: percentage of constraint points
%                   that do not need to fulfill constraints.
%                   Optimization 2: percentage of target points that need
%                   to be activated

% Nthreads      :   (int)  number of parallel processes
%                   Optional. Default = None
% space         :   (str) which space to use for simulation. native or mni.
%
% rebuild       : (bool) indicates whether certain steps in the pipeline
%                 should be recomputed (segmentation, conducivitymap,
%                 comsol..)

% Output
% ------
% best_suggestion   :   (cell) containing the optimal stimulation settings
%  for each lead side defined in hand
%
% ToDo:
% 1. Update GUI (name, Optimization options)
% 2. Directly Efield norm at interpolated target/constraint points from
%    COMSOL
% 3. Include fiber activation?
% 4.



tic
settings;
warning('off','MATLAB:dispatcher:nameConflict')


%% parameters
unit = '1mA'; % type of unit stimulus in FEM simulations

default_lead = 'S:t Jude 1331';
default_atlas = 'Distal Minimal (Ewert 2017)';
default_target = {'STN motor'};
default_constraint = {'STN associative','STN limbic'};
default_threshold = 200;
default_margin = 50;
default_threads = 0;
default_space = 'native';


% define threshold and safetyMargin

EFobj_target = EThreshold;      % threshold 200
EFobj_constraint = 0.87*EThreshold;  % safety margin for constraint areas


%define patient directory and root directory
str_array= strsplit(pat_path,'/');
patient_name = str_array{end};
root = string(join(str_array(:,1:end-1),'/'));
pat_path = append(pat_path,'/');

if exist('lead','dir')==0
    addpath(genpath('/castor/project/proj_nobackup/MATLAB/lead'));
    addpath(genpath('/castor/project/proj_nobackup/MATLAB/spm12'));
end

%try
if Nthreads > 1
    try
        %maxNumCompThreads(Nthreads)
        parpool(Nthreads);
    catch ME
        disp(ME)
    end
else
    Nthreads = 0;
end



%% reconstructed lead parameters

[heads,tails]=lead_parameters(pat_path,space,lead_orientation,hand,lead);


%% conductivity maps
%% map from 7T MNI space to anchor modality
%use the mapped file wt1.nii/wt2.nii to construct conductivity maps

if strcmp(space,'native')
    %warp from high resolution images to n
    MNI7T_to_native(pat_path(1:end-1),rebuild);

    %segment the warped image with SPM
    segment_wt1_job(pat_path,rebuild,space)

    %construct conductivity map for dx and sin (right -and left hemisphere)
    for i = 1:length(hand)
        assign_conductivites(pat_path,hand{i},space)
    end

    disp('Conductivity map in native space computed.')
end




%% get target in native space and load region of interest
targets_and_constraints = [target_names,constraint_names];

%initiate a .mat file in  which target/constraint structure data are to
%be stored
create_structure_file(pat_path,atlas)

if strcmp(space,'native')
    % warp structures of interest to native space
    warp_regions(patient_name,root,atlas,targets_and_constraints);
end


for i = 1:length(hand)
    head = heads.(hand{i});
    tail = tails.(hand{i});
    orientation = lead_orientation(i);

    %% build comsol model
    % simulate the electric field for unit stimulus in case that has
    % not been done previously or if the user requests a rebuild.

    FEM_sol_dir = append(pat_path,'EFdistribution_',hand{i},'_1mA');

    if ~exist(FEM_sol_dir,'dir') || rebuild == 1
        runComsol(pat_path,hand{i},space,Nthreads,lead);
    end

    %% load cleaned volume electric data

    InitialSolution = load_comsol_solution(pat_path,hand{i},unit,lead,Nthreads);
    contact_names = fieldnames(InitialSolution);

    %Get maximum coordinate point in ROI
    max_point = max(InitialSolution.(contact_names{1})(:,1:3));
    min_point = min(InitialSolution.(contact_names{1})(:,1:3));


    %% load target and constraint and  consider only target points within max and min range
    [target,constraint, target_lst,constraint_lst] = load_atlas_roi_2(hand{i},space,pat_path,atlas,target_names,constraint_names,max_point,min_point);

    %% Remove points of target/constraint volumes that lie within the lead volume
    Vol_target = remove_lead_volume2( target,head,tail );
    Vol_constraint = remove_lead_volume2( constraint,head,tail);

    try
        assert(length(Vol_target)>100)
    catch
        disp('warning! Number of target points fewer than 100')
    end

    try
        assert(length(Vol_constraint)>100)
    catch
        disp('warning! Number of constraint points fewer than 100')
    end



    %% approximate target points E-field
    InitialSolution_cell = struct2cell(InitialSolution);
    solution_coords = InitialSolution.(contact_names{1})(:,1:3);


    fprintf('Interpolating comsol model E-field for %d points...',length(Vol_target)+length(Vol_constraint))

    %pick one of two methods,method of fundamental solutions (MFS) or
    %nearest neighbor (NNB)
    method = 'MFS';
    EF_nearest=cell(length(Vol_target),1);

    parfor(j = 1:length(Vol_target),Nthreads)
        [EF_nearest{j},test_point{j}] = nearest_EF(InitialSolution_cell,solution_coords,Vol_target(j,:));
        [~,~,EFnorm_target(j)] = EV_point(EF_nearest{j} ,contact_names,Vol_target(j,:),0,1e8,method);
    end

    % test that the interpolation error is not above 10%
    test_interpolation(EF_nearest,test_point,contact_names,method)
    clear test_point EF_nearest

    parfor(j = 1:length(Vol_constraint),Nthreads)
        [EF_nearest{j},test_point{j}] = nearest_EF(InitialSolution_cell,solution_coords,Vol_constraint(j,:));
        [~,~,EFnorm_constraint(j)] = EV_point(EF_nearest{j} ,contact_names,Vol_constraint(j,:),0,1e8,method);
    end

    % test that the interpolation error is not above 10%
    test_interpolation(EF_nearest,test_point,contact_names,method)
    clear test_point EF_nearest

    %save constraint and target EF in cell array - one cell for each contact
    EnormConstraint = cell(length(contact_names),1);
    for k = 1:length(contact_names)
        for p = 1:length(Vol_constraint)
            EnormConstraint{k}(p) = EFnorm_constraint(p).(contact_names{k});
        end
    end

    EnormTarget = cell(length(contact_names),1);
    for k = 1:length(contact_names)
        for p = 1:length(Vol_target)
            EnormTarget{k}(p) = EFnorm_target(p).(contact_names{k});
        end
    end


    %% Optimization
    cou = eye(19);
    [alpha, J] = run_optimization(optischeme,EFobj_target,EnormTarget,...
        EFobj_constraint,EnormConstraint,relaxation);


    %% Compute VTA

    disp('Computing volume of tissue activated...')

    %compute target activation and spill
    disp("computing target activation")
    [pAct_target,pSpill_target,VTA] = ...
        computing_volumes(contact_names,head,tail,InitialSolution_cell,alpha,cou,target_lst,EFobj_target,Nthreads);


    %compute constraint activation and spill
    disp('computing constraint activation')
    [pAct_constraint,pSpill_constraint,VTA] = ...
        computing_volumes(contact_names,head,tail,InitialSolution_cell,alpha,cou,constraint_lst, EFobj_target,Nthreads);


    %% write array of recommendation
    scores = pAct_target-pAct_constraint-pSpill_target; % scores need to be normalized for meaningful comparison across a dataset of patients?
    [desc_order,idx] = sort(pAct_target-pAct_constraint, 'descend');
    best_idx = idx(1);


    %write results to .txt
    fid=fopen(append(pat_path,'Suggestions_',space,'_',hand{i},'_',optischeme,'_',num2str(relaxation),'.txt'),'w');
    fprintf(fid,'Contacts \t Target activation %s \t Constraint activation %s \t Spill %s \t Alpha \t VTA \n\n','%','%','%');

    a = cell(length(idx),6);
    for j = 1:length(idx)
        in = idx(j);
        a{j,1} = erase(contact_names{in},'.csv');
        a{j,2} = [9 num2str( round(pAct_target(in)*100,2))];
        a{j,3} = num2str( round(pAct_constraint(in)*100,2));
        a{j,4} = num2str( round(pSpill_target(in)*100,2));
        a{j,5} = num2str( round(alpha(in),2) );
        a{j,6} = num2str( round(VTA(in),2) );

        fprintf(fid,' %s \t %s \t\t\t %s \t\t\t %s \t\t %s \t %s \n', a{j,1},a{j,2},a{j,3},a{j,4},a{j,5},a{j,6});
    end

    fclose(fid);

    % print out best option
    best_alpha = num2str( round(alpha(best_idx),2) );
    best_target = num2str( round(pAct_target(best_idx)*100,2));
    best_constraint = num2str( round(pAct_constraint(best_idx)*100,2));
    best_spill = num2str( round(pSpill_target(best_idx)*100,2));
    best_config = erase(contact_names{best_idx},'.csv');
    best_VTA  = num2str( round(VTA(best_idx),2) );
    best_option{i} = sprintf(' %s Best Suggestion: \n --------------------- \n Contacts: %s \n Target activation %s : %s \n Alpha :%s \n Spill %s: %s \n Constraint activation %s : %s \n VTA : %s mm%s \n',hand{i},best_config,'%',best_target,best_alpha,'%',best_spill,'%',best_constraint,best_VTA,char(179));

    if plotoption
        disp('Plotting...')
        % visualisation
        [fig,VTAfig,lgd] = visualize();
        plot_target_and_constraint(pat_path,atlas,targets_and_constraints,hand{i},space,VTAfig)
        plot_VTA(InitialSolution,alpha,EFobj_target,best_idx,VTAfig)
        plot_lead(head,tail,VTAfig,lead,orientation)

        %adjust figure properties
        fac=1;
        ax=VTAfig;

        ax.XLim(1)=ax.XLim(1)-fac*norm(ax.XLim(1)-ax.XLim(2));
        ax.XLim(2)=ax.XLim(2)+fac*norm(ax.XLim(1)-ax.XLim(2));

        ax.YLim(1)=ax.YLim(1)-fac*norm(ax.YLim(1)-ax.YLim(2));
        ax.YLim(2)=ax.YLim(2)+fac*norm(ax.YLim(1)-ax.YLim(2));
        lgt=light(ax);
        lgt.Position=[-50,-50,50];
        axis(ax,'equal')
        %try closing and opening suggestion file

        %system(['killall TextEdit ']);
        %system(['open -a TextEdit ' fullfile( pat_path,append(hand{i},'_suggestion.txt') ) ]);


        fig1=figure('visible','off');
        set(gcf, 'color',[0.1 0.1 0.1])
        copyobj([VTAfig,VTAfig.Legend],fig1);
        savefig(append(pat_path,hand{i},'_stimulation.fig'))
    else
        disp('Not plotting...')
    end
end

msg = best_option{:};


gcp('nocreate');


% catch ME
%       if (strcmp(ME.identifier,'MATLAB:load:couldNotReadFileXX'))
%           msg = 'Needed files are missing. Are you sure you picked the correct patient directory and that it contains all necessary files?';
%
%      else
%          msg = ME.message;
%          disp(ME.identifier)
%
%       end
% end

if ~isempty(gcp('nocreate'))
    delete(gcp('nocreate'));
end

toc
end


function plot_VTA(EFstruct,alpha,isolevel,best_idx,VTAfig)
contactnames = fieldnames(EFstruct);
for i=1:length(contactnames)

    EFinitial=EFstruct.(contactnames{i});
    EF(:,1:3) = EFinitial(:,1:3);
    EF(:,5:7) = alpha(i)*EFinitial(:,5:7);
    EF(:,8) = sqrt(sum(EF(:,5:7).^2,2));

    is_activated = (EF(:,8)>isolevel & ~isnan(EF(:,8)));
    EF_activated = EF(is_activated,1:3);


    shp=alphaShape(EF_activated (:,1),EF_activated(:,2),EF_activated(:,3));

    if i == best_idx

        plot(shp,'FaceAlpha',0.7,'EdgeColor','none','FaceColor','yellow','DisplayName',contactnames{i},'Parent',VTAfig)
        hold(VTAfig,'on')
    else

        plot(shp,'FaceAlpha',0.7,'EdgeColor','none','FaceColor','yellow','DisplayName',contactnames{i},'Visible','off','Parent',VTAfig)
        hold(VTAfig,'on')
    end
end


end